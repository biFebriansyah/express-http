#!/usr/bin/env node
/* eslint-disable no-unreachable */

/**
 * Depedencies and Scripts Load
 */

let indexBootstrapper = require('../index')
let app = require('../src/app')
let debug = require('../src/lib/logger')('*')
let http = require('http')

/**
 * Do Something with the App itself
 */
function beginServer() {
   let port = normalizePort(process.env.SERVER_PORT || '3000')
   app.set('port', port)

   let server = http.createServer(app)
   server.listen(port)
   server.on('error', onError)
   server.on('listening', onListening)

   function normalizePort(val) {
      let port = parseInt(val, 10)
      if (isNaN(port)) {
         return val
      }
      if (port >= 0) {
         return port
      }
      return false
   }

   function onError(error) {
      if (error.syscall !== 'listen') {
         throw error
      }
      let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

      switch (error.code) {
         case 'EACCES':
            console.error(bind + ' requires elevated privileges')
            process.exit(1)
            break
         case 'EADDRINUSE':
            console.error(bind + ' is already in use')
            process.exit(1)
            break
         default:
            throw error
      }
   }

   function onListening() {
      let addr = server.address()
      let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
      debug.info('Listening on ' + bind)
   }
}

/**
 * Begin Bootstrap for additional Requirements, and run the Server
 */
indexBootstrapper.beginAppBootstrap()
beginServer()

module.exports = beginServer
